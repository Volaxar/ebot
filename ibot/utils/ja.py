import reimport blueimport stacklessfrom ibot.utils.js import *# Команды бота# # @команда:параметр_1;параметр_2;...# $макрос:параметр_1;параметр_2;...class Ja:    _prefix = {'@': 'cmd', '$': 'mac'}        def __init__(self, bot_login):        self.jid_control = 'control@172.20.0.3'        self.jid_admin = 'admin@172.20.0.3'                self.ja_online = False                login = '{}@172.20.0.3/Bot'.format(bot_login)                password = ''        server = '172.20.0.3'        port = '5222'                self.error = False        self.to_list = None                try:            self.jid = xmpp.protocol.JID(login)                        self.ja_client = xmpp.Client(self.jid.getDomain(), debug=[])                        if self.ja_client.connect(server=(server, port), secure=0):                xmpp.features.register(self.ja_client, self.jid.getDomain(),                                       {'username': self.jid.getNode(), 'password': password,                                        'name': self.jid.getNode()})                self.ja_client.auth(user=self.jid.getNode(), password=password, resource=self.jid.getResource())                                # message: getBody, getSubject, getThread                # presence: getPriority, getShow, getStatus, getRole,                #       getAffiliation, getNick, getJid, getReason, getActor, getStatusCode                # iq: getQueryNS, getQuerynode, getQueryPayload, getQueryChildren,                                 self.ja_client.RegisterHandler('message', self.OnMessage)                self.ja_client.RegisterHandler('presence', self.OnPresence)                                self.ja_client.sendInitPresence(requestRoster=1)                                stackless.tasklet(self.ja_process)()                                self.ja_online = True        except Exception as e:            print 'except in ja.__init__: {}'.format(e)        # отправка сообщений    def ja_send(self, to, msg):        try:            if self.ja_client:                self.ja_client.send(xmpp.protocol.Message(to, msg))        except Exception as e:            print 'except in ja.ja_send: {}'.format(e)                        self.ja_close()        # Закрытие джа клиента    def ja_close(self):        if self.ja_online:            try:                                if hasattr(self.ja_client, 'send'):                    send_bye()                                if hasattr(self.ja_client, 'UnregisterHandler'):                    self.ja_client.UnregisterHandler('message', self.OnMessage)                    self.ja_client.UnregisterHandler('presence', self.OnPresence)                                        self.ja_client.disconnect()                        except Exception as e:                print 'except in ja.ja_close: {}'.format(e)            finally:                self.ja_online = 0                self.ja_client = None        # Рабочий процесс джа клиента    def ja_process(self):                while self.ja_online:            try:                if not hasattr(self.ja_client, 'Process'):                    self.ja_close()                                        return                                self.ja_client.Process()            except Exception as e:                print 'except in ja.ja_process: {}'.format(e)                self.ja_close()                        blue.pyos.synchro.SleepWallclock(100)        # Обработчик входящих сообщений    def OnMessage(self, con, msg):        try:            if msg.getBody():                _pr = msg.getBody()[0]                func = ''                args = ()                                line = ''                                if _pr in Ja._prefix.keys() or _pr == '!':                    _msg = msg.getBody()[1:]                    match = re.search(r'^(\S*)(:|$)(.+)?', _msg)                    line = match.group().split(':')                    func = line[0]                                if _pr in Ja._prefix.keys():                                        if len(line) > 1:                        args = tuple([eval(x) for x in line[1].split(';')])                                        _cs = getattr(bot, Ja._prefix[_pr])                                        if func in _cs.keys():                        reload(_cs[func])                        stackless.tasklet(_cs[func].run)(*args)                                else:                    if len(line) > 1:                        args = tuple([x for x in line[1].split(';')])                                if _pr == '?':                    stackless.tasklet(j_far_message)(msg.getFrom().getNode(), msg.getBody()[1:])                                elif _pr == '!':                    stackless.tasklet(notification)(msg.getFrom().getNode(), func, *args)                except Exception as e:            print 'except in ja.OnMessage: {}'.format(e)        def OnPresence(self, con, msg):        _who = msg.getFrom()        _type = msg.getType()        _show = msg.getShow()                if _who == self.jid:            return                if _type == 'unsubscribe':            self.ja_client.Roster.Unauthorize(_who)            self.ja_client.Roster.Unsubscribe(_who)                elif _type == 'subscribe':            self.ja_client.Roster.Subscribe(_who)            self.ja_client.Roster.Authorize(_who)                elif _type == 'error':            if bot and getattr(bot, 'info', None):                print 'Presence error: {}'.format(msg)